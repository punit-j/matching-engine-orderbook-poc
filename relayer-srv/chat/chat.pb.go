// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: relayer-srv/chat/chat.proto

package chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualToken string `protobuf:"bytes,1,opt,name=virtualToken,proto3" json:"virtualToken,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetVirtualToken() string {
	if x != nil {
		return x.VirtualToken
	}
	return ""
}

func (x *Asset) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderType              string `protobuf:"bytes,1,opt,name=orderType,proto3" json:"orderType,omitempty"`
	Deadline               uint64 `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Trader                 string `protobuf:"bytes,3,opt,name=trader,proto3" json:"trader,omitempty"`
	MakeAsset              *Asset `protobuf:"bytes,4,opt,name=makeAsset,proto3" json:"makeAsset,omitempty"`
	TakeAsset              *Asset `protobuf:"bytes,5,opt,name=takeAsset,proto3" json:"takeAsset,omitempty"`
	Salt                   string `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	LimitOrderTriggerPrice string `protobuf:"bytes,7,opt,name=limitOrderTriggerPrice,proto3" json:"limitOrderTriggerPrice,omitempty"`
	IsShort                bool   `protobuf:"varint,8,opt,name=isShort,proto3" json:"isShort,omitempty"`
	Sign                   string `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
	Fills                  string `protobuf:"bytes,10,opt,name=fills,proto3" json:"fills,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{1}
}

func (x *Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Order) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *Order) GetTrader() string {
	if x != nil {
		return x.Trader
	}
	return ""
}

func (x *Order) GetMakeAsset() *Asset {
	if x != nil {
		return x.MakeAsset
	}
	return nil
}

func (x *Order) GetTakeAsset() *Asset {
	if x != nil {
		return x.TakeAsset
	}
	return nil
}

func (x *Order) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *Order) GetLimitOrderTriggerPrice() string {
	if x != nil {
		return x.LimitOrderTriggerPrice
	}
	return ""
}

func (x *Order) GetIsShort() bool {
	if x != nil {
		return x.IsShort
	}
	return false
}

func (x *Order) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *Order) GetFills() string {
	if x != nil {
		return x.Fills
	}
	return ""
}

type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion string   `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"` // client version
	Timestamp     int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // unix time
	Gossip        bool     `protobuf:"varint,3,opt,name=gossip,proto3" json:"gossip,omitempty"`              // true to have receiver peer gossip the message to neighbors
	Data          []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	NodeId        []string `protobuf:"bytes,5,rep,name=nodeId,proto3" json:"nodeId,omitempty"`           // id of node that created the message (not the peer that may have sent it). =base58(multihash(nodePubKey))
	NodeAddress   []string `protobuf:"bytes,6,rep,name=nodeAddress,proto3" json:"nodeAddress,omitempty"` // Authoring node Secp256k1 public key (32bytes) - protobufs serielized
	Sign          [][]byte `protobuf:"bytes,7,rep,name=sign,proto3" json:"sign,omitempty"`               // signature of message data + method specific data by message authoring node.
	Chain         string   `protobuf:"bytes,8,opt,name=chain,proto3" json:"chain,omitempty"`             // chain name of message data
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MessageData) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *MessageData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MessageData) GetGossip() bool {
	if x != nil {
		return x.Gossip
	}
	return false
}

func (x *MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MessageData) GetNodeId() []string {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *MessageData) GetNodeAddress() []string {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *MessageData) GetSign() [][]byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *MessageData) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type TransactionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string   `protobuf:"bytes,1,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	OrderID         []string `protobuf:"bytes,2,rep,name=orderID,proto3" json:"orderID,omitempty"`
	TxID            int64    `protobuf:"varint,3,opt,name=txID,proto3" json:"txID,omitempty"`
	NextLeader      string   `protobuf:"bytes,4,opt,name=nextLeader,proto3" json:"nextLeader,omitempty"`
	NextPubKey      string   `protobuf:"bytes,5,opt,name=nextPubKey,proto3" json:"nextPubKey,omitempty"`
	Error           string   `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionMessage) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TransactionMessage) GetOrderID() []string {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *TransactionMessage) GetTxID() int64 {
	if x != nil {
		return x.TxID
	}
	return 0
}

func (x *TransactionMessage) GetNextLeader() string {
	if x != nil {
		return x.NextLeader
	}
	return ""
}

func (x *TransactionMessage) GetNextPubKey() string {
	if x != nil {
		return x.NextPubKey
	}
	return ""
}

func (x *TransactionMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TransactionMessageMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageData        *MessageData        `protobuf:"bytes,1,opt,name=messageData,proto3" json:"messageData,omitempty"`
	TransactionMessage *TransactionMessage `protobuf:"bytes,2,opt,name=transactionMessage,proto3" json:"transactionMessage,omitempty"`
}

func (x *TransactionMessageMessageData) Reset() {
	*x = TransactionMessageMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMessageMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessageMessageData) ProtoMessage() {}

func (x *TransactionMessageMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessageMessageData.ProtoReflect.Descriptor instead.
func (*TransactionMessageMessageData) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionMessageMessageData) GetMessageData() *MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

func (x *TransactionMessageMessageData) GetTransactionMessage() *TransactionMessage {
	if x != nil {
		return x.TransactionMessage
	}
	return nil
}

type OrderMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageData       *MessageData `protobuf:"bytes,1,opt,name=messageData,proto3" json:"messageData,omitempty"`
	OrderMessageArray []*Order     `protobuf:"bytes,2,rep,name=orderMessageArray,proto3" json:"orderMessageArray,omitempty"`
}

func (x *OrderMessageData) Reset() {
	*x = OrderMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMessageData) ProtoMessage() {}

func (x *OrderMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMessageData.ProtoReflect.Descriptor instead.
func (*OrderMessageData) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{5}
}

func (x *OrderMessageData) GetMessageData() *MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

func (x *OrderMessageData) GetOrderMessageArray() []*Order {
	if x != nil {
		return x.OrderMessageArray
	}
	return nil
}

// a protocol define a set of reuqest and responses
type MatchedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order1 *Order `protobuf:"bytes,1,opt,name=order1,proto3" json:"order1,omitempty"`
	Order2 *Order `protobuf:"bytes,2,opt,name=order2,proto3" json:"order2,omitempty"`
}

func (x *MatchedOrder) Reset() {
	*x = MatchedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedOrder) ProtoMessage() {}

func (x *MatchedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedOrder.ProtoReflect.Descriptor instead.
func (*MatchedOrder) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{6}
}

func (x *MatchedOrder) GetOrder1() *Order {
	if x != nil {
		return x.Order1
	}
	return nil
}

func (x *MatchedOrder) GetOrder2() *Order {
	if x != nil {
		return x.Order2
	}
	return nil
}

// a protocol define a set of reuqest and responses
type MatchedOrderMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageData  *MessageData    `protobuf:"bytes,1,opt,name=messageData,proto3" json:"messageData,omitempty"`
	MatchedOrder []*MatchedOrder `protobuf:"bytes,2,rep,name=matchedOrder,proto3" json:"matchedOrder,omitempty"`
}

func (x *MatchedOrderMessageData) Reset() {
	*x = MatchedOrderMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedOrderMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedOrderMessageData) ProtoMessage() {}

func (x *MatchedOrderMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedOrderMessageData.ProtoReflect.Descriptor instead.
func (*MatchedOrderMessageData) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{7}
}

func (x *MatchedOrderMessageData) GetMessageData() *MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

func (x *MatchedOrderMessageData) GetMatchedOrder() []*MatchedOrder {
	if x != nil {
		return x.MatchedOrder
	}
	return nil
}

type GossipMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*GossipMessage_MatchedOrder
	//	*GossipMessage_TransactionMessage
	//	*GossipMessage_OrderMessageData
	Message isGossipMessage_Message `protobuf_oneof:"message"`
}

func (x *GossipMessage) Reset() {
	*x = GossipMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_srv_chat_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipMessage) ProtoMessage() {}

func (x *GossipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_srv_chat_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipMessage.ProtoReflect.Descriptor instead.
func (*GossipMessage) Descriptor() ([]byte, []int) {
	return file_relayer_srv_chat_chat_proto_rawDescGZIP(), []int{8}
}

func (m *GossipMessage) GetMessage() isGossipMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *GossipMessage) GetMatchedOrder() *MatchedOrderMessageData {
	if x, ok := x.GetMessage().(*GossipMessage_MatchedOrder); ok {
		return x.MatchedOrder
	}
	return nil
}

func (x *GossipMessage) GetTransactionMessage() *TransactionMessageMessageData {
	if x, ok := x.GetMessage().(*GossipMessage_TransactionMessage); ok {
		return x.TransactionMessage
	}
	return nil
}

func (x *GossipMessage) GetOrderMessageData() *OrderMessageData {
	if x, ok := x.GetMessage().(*GossipMessage_OrderMessageData); ok {
		return x.OrderMessageData
	}
	return nil
}

type isGossipMessage_Message interface {
	isGossipMessage_Message()
}

type GossipMessage_MatchedOrder struct {
	MatchedOrder *MatchedOrderMessageData `protobuf:"bytes,3,opt,name=matchedOrder,proto3,oneof"`
}

type GossipMessage_TransactionMessage struct {
	TransactionMessage *TransactionMessageMessageData `protobuf:"bytes,4,opt,name=transactionMessage,proto3,oneof"`
}

type GossipMessage_OrderMessageData struct {
	OrderMessageData *OrderMessageData `protobuf:"bytes,5,opt,name=orderMessageData,proto3,oneof"`
}

func (*GossipMessage_MatchedOrder) isGossipMessage_Message() {}

func (*GossipMessage_TransactionMessage) isGossipMessage_Message() {}

func (*GossipMessage_OrderMessageData) isGossipMessage_Message() {}

var File_relayer_srv_chat_chat_proto protoreflect.FileDescriptor

var file_relayer_srv_chat_chat_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x73, 0x72, 0x76, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x22, 0x41, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xc2, 0x01, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x58, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x12, 0x23, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x32, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x47,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relayer_srv_chat_chat_proto_rawDescOnce sync.Once
	file_relayer_srv_chat_chat_proto_rawDescData = file_relayer_srv_chat_chat_proto_rawDesc
)

func file_relayer_srv_chat_chat_proto_rawDescGZIP() []byte {
	file_relayer_srv_chat_chat_proto_rawDescOnce.Do(func() {
		file_relayer_srv_chat_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_relayer_srv_chat_chat_proto_rawDescData)
	})
	return file_relayer_srv_chat_chat_proto_rawDescData
}

var file_relayer_srv_chat_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_relayer_srv_chat_chat_proto_goTypes = []interface{}{
	(*Asset)(nil),                         // 0: chat.Asset
	(*Order)(nil),                         // 1: chat.Order
	(*MessageData)(nil),                   // 2: chat.MessageData
	(*TransactionMessage)(nil),            // 3: chat.TransactionMessage
	(*TransactionMessageMessageData)(nil), // 4: chat.TransactionMessageMessageData
	(*OrderMessageData)(nil),              // 5: chat.OrderMessageData
	(*MatchedOrder)(nil),                  // 6: chat.MatchedOrder
	(*MatchedOrderMessageData)(nil),       // 7: chat.MatchedOrderMessageData
	(*GossipMessage)(nil),                 // 8: chat.GossipMessage
}
var file_relayer_srv_chat_chat_proto_depIdxs = []int32{
	0,  // 0: chat.Order.makeAsset:type_name -> chat.Asset
	0,  // 1: chat.Order.takeAsset:type_name -> chat.Asset
	2,  // 2: chat.TransactionMessageMessageData.messageData:type_name -> chat.MessageData
	3,  // 3: chat.TransactionMessageMessageData.transactionMessage:type_name -> chat.TransactionMessage
	2,  // 4: chat.OrderMessageData.messageData:type_name -> chat.MessageData
	1,  // 5: chat.OrderMessageData.orderMessageArray:type_name -> chat.Order
	1,  // 6: chat.MatchedOrder.order1:type_name -> chat.Order
	1,  // 7: chat.MatchedOrder.order2:type_name -> chat.Order
	2,  // 8: chat.MatchedOrderMessageData.messageData:type_name -> chat.MessageData
	6,  // 9: chat.MatchedOrderMessageData.matchedOrder:type_name -> chat.MatchedOrder
	7,  // 10: chat.GossipMessage.matchedOrder:type_name -> chat.MatchedOrderMessageData
	4,  // 11: chat.GossipMessage.transactionMessage:type_name -> chat.TransactionMessageMessageData
	5,  // 12: chat.GossipMessage.orderMessageData:type_name -> chat.OrderMessageData
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_relayer_srv_chat_chat_proto_init() }
func file_relayer_srv_chat_chat_proto_init() {
	if File_relayer_srv_chat_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relayer_srv_chat_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMessageMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedOrderMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_srv_chat_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_relayer_srv_chat_chat_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GossipMessage_MatchedOrder)(nil),
		(*GossipMessage_TransactionMessage)(nil),
		(*GossipMessage_OrderMessageData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relayer_srv_chat_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relayer_srv_chat_chat_proto_goTypes,
		DependencyIndexes: file_relayer_srv_chat_chat_proto_depIdxs,
		MessageInfos:      file_relayer_srv_chat_chat_proto_msgTypes,
	}.Build()
	File_relayer_srv_chat_chat_proto = out.File
	file_relayer_srv_chat_chat_proto_rawDesc = nil
	file_relayer_srv_chat_chat_proto_goTypes = nil
	file_relayer_srv_chat_chat_proto_depIdxs = nil
}
